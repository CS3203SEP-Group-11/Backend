{
	"info": {
		"_postman_id": "complete-auth-flow-collection",
		"name": "LevelUp Complete Authentication Flow",
		"description": "Complete authentication flow: Register → Login → Test Notifications with authenticated user",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health Check - User Service",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{userServiceUrl}}/api/users/all",
					"host": [
						"{{userServiceUrl}}"
					],
					"path": [
						"api",
						"users",
						"all"
					]
				},
				"description": "Check if user service is running"
			},
			"response": []
		},
		{
			"name": "2. Health Check - Notification Service",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{notificationServiceUrl}}/health",
					"host": [
						"{{notificationServiceUrl}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if notification service is running"
			},
			"response": []
		},
		{
			"name": "3. Register New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extract user ID from response if needed",
							"if (pm.response.code === 200) {",
							"    console.log('User registered successfully');",
							"    // The JWT token is automatically set in cookies",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\"\n}"
				},
				"url": {
					"raw": "{{userServiceUrl}}/api/auth/register",
					"host": [
						"{{userServiceUrl}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				},
				"description": "Register a new user. JWT token will be set in cookies automatically."
			},
			"response": []
		},
		{
			"name": "4. Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extract JWT token from cookies and decode user ID",
							"if (pm.response.code === 200) {",
							"    console.log('User logged in successfully');",
							"    ",
							"    // Extract JWT token from cookies",
							"    const cookies = pm.cookies.all();",
							"    const jwtCookie = cookies.find(cookie => cookie.name === 'jwt');",
							"    if (jwtCookie) {",
							"        pm.environment.set('jwt_token', jwtCookie.value);",
							"        console.log('JWT token stored in environment');",
							"        ",
							"        // Decode JWT token to extract user ID",
							"        try {",
							"            const token = jwtCookie.value;",
							"            const payload = JSON.parse(atob(token.split('.')[1]));",
							"            const userId = payload.sub; // Subject is the user ID",
							"            pm.environment.set('user_id', userId);",
							"            console.log('User ID extracted:', userId);",
							"        } catch (e) {",
							"            console.log('Error decoding JWT token:', e);",
							"        }",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{userServiceUrl}}/api/auth/login",
					"host": [
						"{{userServiceUrl}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				},
				"description": "Login with the registered user. JWT token will be set in cookies."
			},
			"response": []
		},
		{
			"name": "5. Get Current User (Authenticated)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-User-ID",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{userServiceUrl}}/api/users/me",
					"host": [
						"{{userServiceUrl}}"
					],
					"path": [
						"api",
						"users",
						"me"
					]
				},
				"description": "Get current user information using X-User-ID header extracted from JWT token"
			},
			"response": []
		},
		{
			"name": "6. Send Email Notification (Authenticated)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get user ID from the current user endpoint",
							"// This will be used in the notification request"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    console.log('Email notification sent successfully');",
							"    const response = pm.response.json();",
							"    pm.environment.set('notification_id', response.id);",
							"    pm.environment.set('user_id', response.userId);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{user_id}}\",\n    \"subject\": \"Welcome to LevelUp!\",\n    \"body\": \"Hello {{user_firstName}}, welcome to LevelUp! This is your first notification. We're excited to have you on board!\"\n}"
				},
				"url": {
					"raw": "{{notificationServiceUrl}}/api/notifications/email",
					"host": [
						"{{notificationServiceUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"email"
					]
				},
				"description": "Send email notification to the authenticated user"
			},
			"response": []
		},
		{
			"name": "7. Create In-App Notification (Authenticated)",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{notificationServiceUrl}}/api/notifications/in-app?userId={{user_id}}&title=Welcome Notification&body=Welcome to LevelUp! Check your email for more details.&type=INFO",
					"host": [
						"{{notificationServiceUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"in-app"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{user_id}}"
						},
						{
							"key": "title",
							"value": "Welcome Notification"
						},
						{
							"key": "body",
							"value": "Welcome to LevelUp! Check your email for more details."
						},
						{
							"key": "type",
							"value": "INFO"
						}
					]
				},
				"description": "Create an in-app notification for the authenticated user"
			},
			"response": []
		},
		{
			"name": "8. Get User Notifications",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{notificationServiceUrl}}/api/notifications/user/{{user_id}}",
					"host": [
						"{{notificationServiceUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"user",
						"{{user_id}}"
					]
				},
				"description": "Get all notifications for the authenticated user"
			},
			"response": []
		},
		{
			"name": "9. Get Notification by ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{notificationServiceUrl}}/api/notifications/{{notification_id}}",
					"host": [
						"{{notificationServiceUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"{{notification_id}}"
					]
				},
				"description": "Get specific notification by ID"
			},
			"response": []
		},
		{
			"name": "10. Delete User (Cleanup)",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-User-ID",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{userServiceUrl}}/api/users/{{user_id}}",
					"host": [
						"{{userServiceUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				},
				"description": "Delete the test user (cleanup). Requires X-User-ID header for authentication."
			},
			"response": []
		},
		{
			"name": "11. Logout User",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{userServiceUrl}}/api/auth/logout",
					"host": [
						"{{userServiceUrl}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				},
				"description": "Logout the user and clear JWT token"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "userServiceUrl",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "notificationServiceUrl",
			"value": "http://localhost:8087",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_firstName",
			"value": "Test",
			"type": "string"
		},
		{
			"key": "notification_id",
			"value": "",
			"type": "string"
		}
	]
}
